if (!UtilityKt.isIdeaActive) {
    apply plugin: 'me.champeau.gradle.jmh'
    apply plugin: 'kotlin-allopen'

    allOpen {
        annotation('org.openjdk.jmh.annotations.State')
    }
}

kotlin {
    targets {
        if (UtilityKt.isIdeaActive) {
            fromPreset(presets.jvm, 'jmh')
        } else {
            fromPreset(presets.jvmWithJava, 'jvmWithJava')
        }
    }

    if (UtilityKt.isIdeaActive) {
        sourceSets.jmhMain {
            kotlin.srcDir 'src/jmh/kotlin'

            dependencies {
                api project(':ktor-server:ktor-server-test-host')
                api project(':ktor-server:ktor-server-netty')
                api project(':ktor-server:ktor-server-jetty')
                api project(':ktor-server:ktor-server-cio')
                api project(':ktor-client:ktor-client-cio')
                api project(':ktor-client:ktor-client-apache')

                api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
                api group: 'org.openjdk.jmh', name: 'jmh-core', version: jmh_version
                api group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
                api group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttp_version
                api group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
            }
        }
    }
}

if (!UtilityKt.isIdeaActive) {
    description = ''
    dependencies {
        api group: 'org.openjdk.jmh', name: 'jmh-core', version: jmh_version

        def deps = [
            project(':ktor-server:ktor-server-test-host'),
            project(':ktor-server:ktor-server-netty'),
            project(':ktor-server:ktor-server-jetty'),
            project(':ktor-server:ktor-server-cio'),
            project(':ktor-client:ktor-client-cio'),
            project(':ktor-client:ktor-client-apache')
        ]

        deps.each {
            jmh it
            jmhCompile it
            jmhCompileClasspath it
            jmhRuntimeClasspath it

            jmh it.kotlin.targets.jvm.compilations.main.output.allOutputs
            jmhCompileClasspath it.kotlin.targets.jvm.compilations.main.output.allOutputs
            jmhRuntimeClasspath it.kotlin.targets.jvm.compilations.main.output.allOutputs

            jmh it.kotlin.targets.jvm.compilations.test.output.allOutputs
            jmhCompileClasspath it.kotlin.targets.jvm.compilations.test.output.allOutputs
            jmhRuntimeClasspath it.kotlin.targets.jvm.compilations.test.output.allOutputs

//        jmhCompile it.kotlin.targets.jvm.compilations.test.output.allOutputs

        }

        jmh group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
        jmh group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.0'
        jmh group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
    }

    jmh {
        jmhVersion = jmh_version
        jmhJar {
            archiveFileName = 'benchmarks.jar'
        }
    }


    task runBenchmark(type: JavaExec, dependsOn: 'jmhJar') {
        def mainClassFqName = null

        if (project.hasProperty('benchmarkClassFqName')) {
            mainClassFqName = project.benchmarkClassFqName
        } else if (project.hasProperty('benchmarkName')) {
            mainClassFqName = "io.ktor.server.benchmarks.${project.benchmarkName}Kt"
        }

        classpath = sourceSets.jmh.runtimeClasspath + jmhJar.outputs.files
        main = mainClassFqName
        systemProperties['benchmarkClassFqName'] = mainClassFqName

        doFirst {
            if (mainClassFqName == null) {
                throw new InvalidUserDataException("Neither benchmarkName nor benchmarkClassFqName property specified (use option -P to assign)")
            }

            new File(project.buildDir, 'reports/benchmarks').mkdirs()
        }
    }
}
