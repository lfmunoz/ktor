def jdk = 6

if (JdkKt.JDK8_MODULES.contains(project.name)) {
    jdk = 8
} else if (JdkKt.JDK7_MODULES.contains(project.name)) {
    jdk = 7
}

apply plugin: "kotlinx-atomicfu"

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
    }

    task jarTest(type: Jar, dependsOn: jvmTestClasses) {
        from targets.jvm.compilations.test.output
        classifier 'test'
    }

    configure(targets) {
        compilations.all { compilation ->
            if (compilation.name == "main") {
                def compileTask = tasks.getByName(compilation.compileKotlinTaskName)
                if (!compileTask.name.endsWith("Jvm")) return

                switch (jdk) {
                    case 8:
                        compileTask.kotlinOptions.jdkHome = System.env.JDK_18
                        break
                    case 7:
                        compileTask.kotlinOptions.jdkHome = System.env.JDK_17 ?: System.env.JDK_18
                        break
                    default:
                        compileTask.kotlinOptions.jdkHome = System.env.JDK_16 ?: System.env.JDK_17 ?: System.env.JDK_18
                        break
                }
            }
        }
    }

    sourceSets {
        jvmMain.dependencies {
            api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
            if (jdk > 6) {
                api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
            }
            if (jdk > 7) {
                api group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
            }

            api group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
        }

        jvmTest.dependencies {
            api 'org.jetbrains.kotlin:kotlin-test'
            api 'org.jetbrains.kotlin:kotlin-test-junit'
            api "junit:junit:$junit_version"

            api group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
            api group: 'junit', name: 'junit', version: junit_version

            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"
        }
    }
}

dependencies {
    if (jdk > 7) {
        jvmMainApi(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: coroutines_version) {
            exclude(module: 'kotlin-stdlib')
            exclude(module: 'kotlin-stdlib-jvm')
            exclude(module: 'kotlin-stdlib-jdk8')
            exclude(module: 'kotlin-stdlib-jdk7')
        }
    }
}

jvmTest {
    ignoreFailures = true
    maxHeapSize = "2g"
    exclude("**/*StressTest*")
}

task stressTest(type: Test) {
    classpath = files { jvmTest.classpath }
    testClassesDirs = files { jvmTest.testClassesDirs }

    ignoreFailures = true
    maxHeapSize = "2g"
    forkEvery = 1
    include("**/*StressTest*")
    systemProperty "enable.stress.tests", "true"
}

configurations {
    testOutput.extendsFrom(testCompile)
    boot
}

jvmJar {
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": configuredVersion)
    }
}
